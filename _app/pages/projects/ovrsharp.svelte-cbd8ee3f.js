import{S as e,i as a,s as r,K as t,Q as n,R as o,T as s,U as l,V as i,W as c,X as h,l as v,k as f,j as p,e as u,t as d,M as w,N as y,d as m,n as g,m as $,c as E,a as O,g as V,b as I,O as b,D as R,f as S,o as k,E as T,x as A,u as D,v as P,P as C}from"../../chunks/vendor-b9a54bf3.js";import{H}from"../../chunks/Hero-ffe472f4.js";function N(e){let a,r,N,x,W,G,F,j,M,_,L,X,z,U,B,Y,q,J,K,Q,Z,ee,ae,re,te,ne,oe,se,le,ie,ce,he,ve,fe,pe,ue,de,we,ye,me,ge,$e,Ee,Oe,Ve,Ie,be,Re,Se,ke,Te,Ae,De,Pe,Ce,He,Ne,xe,We,Ge,Fe,je,Me,_e,Le,Xe,ze,Ue,Be,Ye,qe,Je,Ke,Qe,Ze,ea,aa,ra,ta,na,oa,sa,la,ia,ca,ha,va,fa,pa,ua,da,wa,ya,ma,ga,$a,Ea,Oa,Va,Ia,ba,Ra,Sa,ka,Ta,Aa;return x=new H({props:{title:"OVRSharp",subtitle:"High-level idiomatic C# interface for working with the OpenVR API",imageUrl:"/img/projects/ovrsharp.svg",link:"https://github.com/OVRTools/OVRSharp",showOvrToolsSubtitle:!0}}),L=new t({props:{icon:n}}),q=new o({props:{language:s,code:e[1]}}),re=new t({props:{icon:l}}),ie=new o({props:{language:s,code:e[0]}}),ue=new t({props:{icon:i,size:"xs"}}),Oe=new t({props:{icon:c,size:"xs"}}),Ae=new t({props:{icon:h,size:"xs"}}),Fe=new o({props:{language:s,code:e[2]}}),Ye=new o({props:{language:s,code:e[3]}}),ta=new o({props:{language:s,code:e[4]}}),fa=new o({props:{language:s,code:e[5]}}),{c(){a=new C,r=v(),N=f(),p(x.$$.fragment),W=f(),G=u("div"),F=u("section"),j=u("div"),M=u("div"),_=u("h2"),p(L.$$.fragment),X=d("\n          With OVRSharp"),z=f(),U=u("p"),B=d("Beautiful. Immaculate. Easy to follow. Wow."),Y=f(),p(q.$$.fragment),J=f(),K=u("p"),Q=d("It's so much shorter that I could probably write a few more paragraphs\n          here to make this side as long as the other."),Z=f(),ee=u("div"),ae=u("h2"),p(re.$$.fragment),te=d("\n          Without OVRSharp"),ne=f(),oe=u("p"),se=d("Awful. Hard to read. It's a mess."),le=f(),p(ie.$$.fragment),ce=f(),he=u("div"),ve=u("section"),fe=u("div"),pe=u("h2"),p(ue.$$.fragment),de=d("\n        Lightweight"),we=f(),ye=u("p"),me=d("OVRSharp can be integrated into any C# project, whether you're using\n        Unity, Godot, or even no engine at all. With a light footprint, you can\n        use as little or as much as you need."),ge=f(),$e=u("div"),Ee=u("h2"),p(Oe.$$.fragment),Ve=d("\n        Idiomatic"),Ie=f(),be=u("p"),Re=d("Instead of accessing low-level APIs, dealing with pointers, and the\n        like, you can use the familiar .NET types and features you already know\n        and love."),Se=f(),ke=u("div"),Te=u("h2"),p(Ae.$$.fragment),De=d("\n        Open source"),Pe=f(),Ce=u("p"),He=d("As with all our other projects, OVRSharp is open source. This means you\n        can benefit from the hard work of the community, as well as tweak and\n        improve the library to suit your needs."),Ne=f(),xe=u("section"),We=u("div"),Ge=u("div"),p(Fe.$$.fragment),je=f(),Me=u("div"),_e=u("p"),Le=d("OVRSharp's simple API makes it easy to write overlays for OpenVR. Just\n          extend the Overlay class, implement your logic, and you're good to go.\n          The raw OpenVR API is hidden behind a simple interface."),Xe=f(),ze=u("section"),Ue=u("div"),Be=u("div"),p(Ye.$$.fragment),qe=f(),Je=u("div"),Ke=u("p"),Qe=d("Some parts of the OpenVR API require specialized knowledge of graphics\n          APIs like OpenGL or DirectX. We've abstracted these details away, so\n          you can focus on the core of your overlay."),Ze=f(),ea=u("section"),aa=u("div"),ra=u("div"),p(ta.$$.fragment),na=f(),oa=u("div"),sa=u("p"),la=d("With an interface-based API, OVRSharp easily works with patterns like\n          dependency injection, so you don't need to worry about what's\n          happening under the hood."),ia=f(),ca=u("section"),ha=u("div"),va=u("div"),p(fa.$$.fragment),pa=f(),ua=u("div"),da=u("p"),wa=d('If you want to run "close to the metal", you can still use the\n          underlying OpenVR API. This is useful if you need functionality that\'s\n          not yet available in the library or if performance is critical.'),ya=f(),ma=u("section"),ga=u("h2"),$a=d("Get started"),Ea=f(),Oa=u("p"),Va=d("Ready to write your first VR overlay? Check out our\n      "),Ia=u("a"),ba=d("getting started"),Ra=d("\n      guide, where you'll write your first overlay in a few minutes. You can also\n      check out the\n      "),Sa=u("a"),ka=d("repository"),Ta=d("\n      on GitHub, where you can find the source code for the library and get help\n      from the community."),this.h()},l(e){const t=w('[data-svelte="svelte-cey048"]',document.head);a=y(t),r=v(),t.forEach(m),N=g(e),$(x.$$.fragment,e),W=g(e),G=E(e,"DIV",{class:!0});var n=O(G);F=E(n,"SECTION",{class:!0});var o=O(F);j=E(o,"DIV",{class:!0});var s=O(j);M=E(s,"DIV",{class:!0});var l=O(M);_=E(l,"H2",{});var i=O(_);$(L.$$.fragment,i),X=V(i,"\n          With OVRSharp"),i.forEach(m),z=g(l),U=E(l,"P",{class:!0});var c=O(U);B=V(c,"Beautiful. Immaculate. Easy to follow. Wow."),c.forEach(m),Y=g(l),$(q.$$.fragment,l),J=g(l),K=E(l,"P",{class:!0});var h=O(K);Q=V(h,"It's so much shorter that I could probably write a few more paragraphs\n          here to make this side as long as the other."),h.forEach(m),l.forEach(m),Z=g(s),ee=E(s,"DIV",{class:!0});var f=O(ee);ae=E(f,"H2",{});var p=O(ae);$(re.$$.fragment,p),te=V(p,"\n          Without OVRSharp"),p.forEach(m),ne=g(f),oe=E(f,"P",{class:!0});var u=O(oe);se=V(u,"Awful. Hard to read. It's a mess."),u.forEach(m),le=g(f),$(ie.$$.fragment,f),f.forEach(m),s.forEach(m),o.forEach(m),n.forEach(m),ce=g(e),he=E(e,"DIV",{class:!0});var d=O(he);ve=E(d,"SECTION",{class:!0});var I=O(ve);fe=E(I,"DIV",{class:!0});var b=O(fe);pe=E(b,"H2",{});var R=O(pe);$(ue.$$.fragment,R),de=V(R,"\n        Lightweight"),R.forEach(m),we=g(b),ye=E(b,"P",{class:!0});var S=O(ye);me=V(S,"OVRSharp can be integrated into any C# project, whether you're using\n        Unity, Godot, or even no engine at all. With a light footprint, you can\n        use as little or as much as you need."),S.forEach(m),b.forEach(m),ge=g(I),$e=E(I,"DIV",{class:!0});var k=O($e);Ee=E(k,"H2",{});var T=O(Ee);$(Oe.$$.fragment,T),Ve=V(T,"\n        Idiomatic"),T.forEach(m),Ie=g(k),be=E(k,"P",{class:!0});var A=O(be);Re=V(A,"Instead of accessing low-level APIs, dealing with pointers, and the\n        like, you can use the familiar .NET types and features you already know\n        and love."),A.forEach(m),k.forEach(m),Se=g(I),ke=E(I,"DIV",{class:!0});var D=O(ke);Te=E(D,"H2",{});var P=O(Te);$(Ae.$$.fragment,P),De=V(P,"\n        Open source"),P.forEach(m),Pe=g(D),Ce=E(D,"P",{class:!0});var C=O(Ce);He=V(C,"As with all our other projects, OVRSharp is open source. This means you\n        can benefit from the hard work of the community, as well as tweak and\n        improve the library to suit your needs."),C.forEach(m),D.forEach(m),I.forEach(m),Ne=g(d),xe=E(d,"SECTION",{class:!0});var H=O(xe);We=E(H,"DIV",{class:!0});var Aa=O(We);Ge=E(Aa,"DIV",{});var Da=O(Ge);$(Fe.$$.fragment,Da),Da.forEach(m),je=g(Aa),Me=E(Aa,"DIV",{class:!0});var Pa=O(Me);_e=E(Pa,"P",{class:!0});var Ca=O(_e);Le=V(Ca,"OVRSharp's simple API makes it easy to write overlays for OpenVR. Just\n          extend the Overlay class, implement your logic, and you're good to go.\n          The raw OpenVR API is hidden behind a simple interface."),Ca.forEach(m),Pa.forEach(m),Aa.forEach(m),H.forEach(m),Xe=g(d),ze=E(d,"SECTION",{class:!0});var Ha=O(ze);Ue=E(Ha,"DIV",{class:!0});var Na=O(Ue);Be=E(Na,"DIV",{});var xa=O(Be);$(Ye.$$.fragment,xa),xa.forEach(m),qe=g(Na),Je=E(Na,"DIV",{class:!0});var Wa=O(Je);Ke=E(Wa,"P",{class:!0});var Ga=O(Ke);Qe=V(Ga,"Some parts of the OpenVR API require specialized knowledge of graphics\n          APIs like OpenGL or DirectX. We've abstracted these details away, so\n          you can focus on the core of your overlay."),Ga.forEach(m),Wa.forEach(m),Na.forEach(m),Ha.forEach(m),Ze=g(d),ea=E(d,"SECTION",{class:!0});var Fa=O(ea);aa=E(Fa,"DIV",{class:!0});var ja=O(aa);ra=E(ja,"DIV",{});var Ma=O(ra);$(ta.$$.fragment,Ma),Ma.forEach(m),na=g(ja),oa=E(ja,"DIV",{class:!0});var _a=O(oa);sa=E(_a,"P",{class:!0});var La=O(sa);la=V(La,"With an interface-based API, OVRSharp easily works with patterns like\n          dependency injection, so you don't need to worry about what's\n          happening under the hood."),La.forEach(m),_a.forEach(m),ja.forEach(m),Fa.forEach(m),ia=g(d),ca=E(d,"SECTION",{class:!0});var Xa=O(ca);ha=E(Xa,"DIV",{class:!0});var za=O(ha);va=E(za,"DIV",{});var Ua=O(va);$(fa.$$.fragment,Ua),Ua.forEach(m),pa=g(za),ua=E(za,"DIV",{class:!0});var Ba=O(ua);da=E(Ba,"P",{class:!0});var Ya=O(da);wa=V(Ya,'If you want to run "close to the metal", you can still use the\n          underlying OpenVR API. This is useful if you need functionality that\'s\n          not yet available in the library or if performance is critical.'),Ya.forEach(m),Ba.forEach(m),za.forEach(m),Xa.forEach(m),ya=g(d),ma=E(d,"SECTION",{class:!0});var qa=O(ma);ga=E(qa,"H2",{});var Ja=O(ga);$a=V(Ja,"Get started"),Ja.forEach(m),Ea=g(qa),Oa=E(qa,"P",{class:!0});var Ka=O(Oa);Va=V(Ka,"Ready to write your first VR overlay? Check out our\n      "),Ia=E(Ka,"A",{href:!0,target:!0,rel:!0});var Qa=O(Ia);ba=V(Qa,"getting started"),Qa.forEach(m),Ra=V(Ka,"\n      guide, where you'll write your first overlay in a few minutes. You can also\n      check out the\n      "),Sa=E(Ka,"A",{href:!0,target:!0,rel:!0});var Za=O(Sa);ka=V(Za,"repository"),Za.forEach(m),Ta=V(Ka,"\n      on GitHub, where you can find the source code for the library and get help\n      from the community."),Ka.forEach(m),qa.forEach(m),d.forEach(m),this.h()},h(){document.title="OVRSharp",a.a=r,I(U,"class","svelte-9i3w3w"),I(K,"class","svelte-9i3w3w"),I(M,"class","svelte-9i3w3w"),I(oe,"class","svelte-9i3w3w"),I(ee,"class","svelte-9i3w3w"),I(j,"class","grid svelte-9i3w3w"),I(F,"class","svelte-9i3w3w"),I(G,"class","content wide svelte-9i3w3w"),I(ye,"class","svelte-9i3w3w"),I(fe,"class","svelte-9i3w3w"),I(be,"class","svelte-9i3w3w"),I($e,"class","svelte-9i3w3w"),I(Ce,"class","svelte-9i3w3w"),I(ke,"class","svelte-9i3w3w"),I(ve,"class","grid svelte-9i3w3w"),I(_e,"class","svelte-9i3w3w"),I(Me,"class","svelte-9i3w3w"),I(We,"class","grid svelte-9i3w3w"),I(xe,"class","svelte-9i3w3w"),I(Ke,"class","svelte-9i3w3w"),I(Je,"class","svelte-9i3w3w"),I(Ue,"class","grid svelte-9i3w3w"),I(ze,"class","svelte-9i3w3w"),I(sa,"class","svelte-9i3w3w"),I(oa,"class","svelte-9i3w3w"),I(aa,"class","grid svelte-9i3w3w"),I(ea,"class","svelte-9i3w3w"),I(da,"class","svelte-9i3w3w"),I(ua,"class","svelte-9i3w3w"),I(ha,"class","grid svelte-9i3w3w"),I(ca,"class","svelte-9i3w3w"),I(Ia,"href","https://github.com/OVRTools/OVRSharp/wiki/Getting-Started"),I(Ia,"target","_blank"),I(Ia,"rel","noopener noreferrer"),I(Sa,"href","https://github.com/OVRTools/OVRSharp"),I(Sa,"target","_blank"),I(Sa,"rel","noopener noreferrer"),I(Oa,"class","svelte-9i3w3w"),I(ma,"class","svelte-9i3w3w"),I(he,"class","content svelte-9i3w3w")},m(e,t){a.m(b,document.head),R(document.head,r),S(e,N,t),k(x,e,t),S(e,W,t),S(e,G,t),R(G,F),R(F,j),R(j,M),R(M,_),k(L,_,null),R(_,X),R(M,z),R(M,U),R(U,B),R(M,Y),k(q,M,null),R(M,J),R(M,K),R(K,Q),R(j,Z),R(j,ee),R(ee,ae),k(re,ae,null),R(ae,te),R(ee,ne),R(ee,oe),R(oe,se),R(ee,le),k(ie,ee,null),S(e,ce,t),S(e,he,t),R(he,ve),R(ve,fe),R(fe,pe),k(ue,pe,null),R(pe,de),R(fe,we),R(fe,ye),R(ye,me),R(ve,ge),R(ve,$e),R($e,Ee),k(Oe,Ee,null),R(Ee,Ve),R($e,Ie),R($e,be),R(be,Re),R(ve,Se),R(ve,ke),R(ke,Te),k(Ae,Te,null),R(Te,De),R(ke,Pe),R(ke,Ce),R(Ce,He),R(he,Ne),R(he,xe),R(xe,We),R(We,Ge),k(Fe,Ge,null),R(We,je),R(We,Me),R(Me,_e),R(_e,Le),R(he,Xe),R(he,ze),R(ze,Ue),R(Ue,Be),k(Ye,Be,null),R(Ue,qe),R(Ue,Je),R(Je,Ke),R(Ke,Qe),R(he,Ze),R(he,ea),R(ea,aa),R(aa,ra),k(ta,ra,null),R(aa,na),R(aa,oa),R(oa,sa),R(sa,la),R(he,ia),R(he,ca),R(ca,ha),R(ha,va),k(fa,va,null),R(ha,pa),R(ha,ua),R(ua,da),R(da,wa),R(he,ya),R(he,ma),R(ma,ga),R(ga,$a),R(ma,Ea),R(ma,Oa),R(Oa,Va),R(Oa,Ia),R(Ia,ba),R(Oa,Ra),R(Oa,Sa),R(Sa,ka),R(Oa,Ta),Aa=!0},p:T,i(e){Aa||(A(x.$$.fragment,e),A(L.$$.fragment,e),A(q.$$.fragment,e),A(re.$$.fragment,e),A(ie.$$.fragment,e),A(ue.$$.fragment,e),A(Oe.$$.fragment,e),A(Ae.$$.fragment,e),A(Fe.$$.fragment,e),A(Ye.$$.fragment,e),A(ta.$$.fragment,e),A(fa.$$.fragment,e),Aa=!0)},o(e){D(x.$$.fragment,e),D(L.$$.fragment,e),D(q.$$.fragment,e),D(re.$$.fragment,e),D(ie.$$.fragment,e),D(ue.$$.fragment,e),D(Oe.$$.fragment,e),D(Ae.$$.fragment,e),D(Fe.$$.fragment,e),D(Ye.$$.fragment,e),D(ta.$$.fragment,e),D(fa.$$.fragment,e),Aa=!1},d(e){m(r),e&&a.d(),e&&m(N),P(x,e),e&&m(W),e&&m(G),P(L),P(q),P(re),P(ie),e&&m(ce),e&&m(he),P(ue),P(Oe),P(Ae),P(Fe),P(Ye),P(ta),P(fa)}}}function x(e){return['var err = EVRInitError.None;\nvar vrSystem = OpenVR.Init(ref err, EVRApplicationType.VRApplication_Overlay);\n\nif (err != EVRInitError.None)\n{\n  // whatever error handling\n}\n\n// Create a dashboard overlay\nvar overlayErr = EVROverlayError.None;\n\nulong overlayHandle;\nulong thumbnailHandle;\n\noverlayErr = OpenVR.Overlay.CreateDashboardOverlay("cool_overlay", "Cool Overlay", ref overlayHandle, ref thumbnailHandle);\n\nif (overlayErr != EVROverlayError.None)\n{\n  // whatever error handling\n}\n\noverlayErr = OpenVR.Overlay.SetOverlayWidthInMeters(overlayHandle, 3.8f);\n\nif (overlayErr != EVROverlayError.None)\n{\n  // whatever error handling\n}\n\n// Set the dashboard overlay up. First, the main overlay\'s texture\noverlayErr = OpenVR.Overlay.SetOverlayFromFile(overlayHandle, @"C:\\path\\to\\file.png");\n\nif (overlayErr != EVROverlayError.None)\n{\n  // whatever error handling\n}\n\n// Then the thumbnail.\noverlayErr = OpenVR.Overlay.SetOverlayFromFile(thumbnailHandle, @"C:\\path\\to\\thumb.png");\n\nif (overlayErr != EVROverlayError.None)\n{\n  // whatever error handling\n}','Application app;\n\ntry {\n  app = new Application(ApplicationType.Overlay);\n} catch(OpenVRSystemException e) {\n  // Errors are exceptions!\n}\n\nvar overlay = new Overlay("cool_overlay", "Cool Overlay", true) {\n  WidthInMeters = 3.8f\n};\n\noverlay.SetTextureFromFile(@"C:\\path\\to\\file.png");\noverlay.SetThumbnailTextureFromFile(@"C:\\path\\to\\thumb.png");','public class MyCoolOverlay : Overlay {\n  public MyCoolOverlay()\n    : base("my_cool_overlay", "My Cool Overlay")\n  {\n    // Attach overlay to right hand\n    TrackedDevice = TrackedDeviceRole.RightHand;\n\n    // Set overlay from png\n    SetTextureFromFile("cool_overlay.png");\n  }\n}',"// Use the DirectX implementation\nvar compositor = DirectXCompositor.Instance;\n\n// Get a Bitmap of what the headset sees\nvar bitmap = compositor.GetMirrorImage();","public MyCoolThing(ICompositorAPI compositor) {\n  // `compositor` could be using DirectX, OpenGL,\n  // or something else entirely!\n}","// Building a VR game? You'll need this.\n// And it's gotta be fast!\nOpenVR.Compositor.Submit(EVREye.Left, ref tex);"]}export default class extends e{constructor(e){super(),a(this,e,x,N,r,{})}}
